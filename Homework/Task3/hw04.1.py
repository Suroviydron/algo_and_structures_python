
# Задача: Проанализировать скорость и сложность одного любого алгоритма,
# разработанных в рамках домашнего задания первых трех уроков.
from random import randint
from timeit import Timer

n = int(input('Длина тестового массива:'))
test = []
for i in range(n):
    test.append(randint(0, 100))


def task_1version(arr):

    arr2 = []
    for idx, j in enumerate(arr):
        if j % 2 == 0:
            arr2.append(idx)
    return print(f'Список индексов четных элементов заданного массива: {arr2}')


def task_2version(arr):

    return print(f'Список индексов четных элементов заданного массива:'
                 f' {[i for i in range(len(arr)) if (arr[i] % 2 == 0)]}')


print(f'Сгенерирован массив: {test}')
t1 = Timer("task_1version(test)", "from __main__ import task_1version", globals={"test": test})
print("Время расчета задачи 1 способом: ", t1.timeit(number=1), "мс")

t2 = Timer("task_2version(test)", "from __main__ import task_2version", globals={"test": test})
print("Время расчета задачи 2 способом: ", t2.timeit(number=1), "мс")

# Сложность данного массива: O(n) - линейна

# Результат для массива из 20 чисел:
# Время расчета задачи 1 способом:  3.33 мс
# Время расчета задачи 2 способом:  2.44 мс

# Результат для массива из 200 чисел:
# Время расчета задачи 1 способом:  6.55 мс
# Время расчета задачи 2 способом:  5.32 мс

# Время, затрачиваемое на обработку первым способом больше (вне зависимости от длины массива).
# Разница растет при увеличении количества элементов массива, соответствующих условиям задачи.
# Рассчет задачи оптимальнее (быстрее и более стильно) производить, используя второй метод.

